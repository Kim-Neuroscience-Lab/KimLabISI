{"version":3,"file":"main.js","sources":["../electron/main.ts"],"sourcesContent":["import { app, BrowserWindow, ipcMain } from 'electron'\nimport { createRequire } from 'node:module'\nimport { fileURLToPath } from 'node:url'\nimport path from 'node:path'\nimport { ChildProcess, execFile } from 'node:child_process'\n\nconst require = createRequire(import.meta.url)\nconst __dirname = path.dirname(fileURLToPath(import.meta.url))\n\n// The built directory structure\n//\n// ├─┬ dist-electron\n// │ ├─┬ main.js    > Electron main\n// │ │ └─┬ preload.js    > Preload scripts\n// │ └─┬ renderer.js > Electron renderer\n//\nprocess.env.DIST_ELECTRON = path.join(__dirname, '../')\nprocess.env.DIST = path.join(__dirname, '../dist')\nprocess.env.VITE_PUBLIC = process.env.VITE_DEV_SERVER_URL\n  ? path.join(process.env.DIST_ELECTRON, './public')\n  : process.env.DIST\n\n// Disable GPU Acceleration for Windows 7\nif (process.platform === 'win32') app.disableHardwareAcceleration()\n\n// Set application name for Windows 10+ notifications\nif (process.platform === 'win32') app.setAppUserModelId(app.getName())\n\nif (!app.requestSingleInstanceLock()) {\n  app.quit()\n  process.exit(0)\n}\n\n// Global variables for processes\nlet mainWindow: BrowserWindow | null = null\nlet pythonBackend: ChildProcess | null = null\n\n// Python Backend Management\nclass PythonBackendManager {\n  private process: ChildProcess | null = null\n  private isReady = false\n  private messageQueue: any[] = []\n  private healthCheckInterval: NodeJS.Timeout | null = null\n  private startupTimeout: NodeJS.Timeout | null = null\n  private readonly STARTUP_TIMEOUT = 15000 // 15 seconds\n  private readonly HEALTH_CHECK_INTERVAL = 5000 // 5 seconds\n\n  async start(): Promise<void> {\n    // Clean up any existing processes first\n    await this.cleanup()\n\n    return new Promise((resolve, reject) => {\n\n      try {\n        const isDevelopment = process.env.NODE_ENV !== 'production' || process.env.VITE_DEV_SERVER_URL\n        const rootDir = isDevelopment\n          ? path.join(__dirname, '../../..')\n          : process.resourcesPath\n\n        // Kill any existing Python processes that might conflict\n        this.killExistingPythonProcesses()\n\n        this.process = execFile('poetry', ['run', 'python', 'src/backend/src/isi_control/main.py'], {\n          stdio: ['pipe', 'pipe', 'pipe'],\n          cwd: rootDir,\n          env: {\n            ...process.env,\n            PYTHONPATH: path.join(rootDir, 'src/backend/src')\n          }\n        }) as ChildProcess\n\n        if (!this.process.pid) {\n          reject(new Error('Failed to get process PID'))\n          return\n        }\n\n\n        this.process.stdout?.on('data', (data) => {\n          const message = data.toString().trim()\n\n          if (message.includes('IPC_READY')) {\n            this.onBackendReady(resolve)\n          } else {\n            this.handleBackendMessage(message)\n          }\n        })\n\n        this.process.stderr?.on('data', (data) => {\n          const errorMsg = data.toString()\n          console.error('Python backend error:', errorMsg)\n        })\n\n        this.process.on('error', (error) => {\n          console.error('Python process error:', error)\n          this.cleanup()\n          reject(error)\n        })\n\n        this.process.on('exit', (code, signal) => {\n          this.isReady = false\n          this.cleanup()\n\n          // Notify renderer of backend failure\n          if (mainWindow) {\n            mainWindow.webContents.send('backend-error', 'Backend process exited')\n          }\n        })\n\n        // Set startup timeout\n        this.startupTimeout = setTimeout(() => {\n          if (!this.isReady) {\n            this.cleanup()\n            reject(new Error('Python backend startup timeout after 15 seconds'))\n          }\n        }, this.STARTUP_TIMEOUT)\n\n      } catch (error) {\n        console.error('Error starting Python backend:', error)\n        reject(error)\n      }\n    })\n  }\n\n  private onBackendReady(resolve: () => void): void {\n    this.isReady = true\n\n    // Clear startup timeout\n    if (this.startupTimeout) {\n      clearTimeout(this.startupTimeout)\n      this.startupTimeout = null\n    }\n\n    // Signal to renderer\n    if (mainWindow) {\n      mainWindow.webContents.send('main-process-message', 'Backend ready')\n    }\n\n    // Process queued messages\n    this.messageQueue.forEach(msg => this.send(msg))\n    this.messageQueue = []\n\n    // Start health monitoring\n    this.startHealthCheck()\n\n    resolve()\n  }\n\n  private handleBackendMessage(message: string): void {\n    // Check if message looks like JSON (starts with '{' or '[')\n    const trimmed = message.trim()\n    if (trimmed.startsWith('{') || trimmed.startsWith('[')) {\n      try {\n        const parsedMessage = JSON.parse(trimmed)\n        this.handleMessage(parsedMessage)\n      } catch (e) {\n        console.error('Failed to parse JSON message from backend:', message, e)\n      }\n    } else {\n      // Regular log message - log it for debugging\n      console.log('Backend log:', message)\n    }\n  }\n\n  private startHealthCheck(): void {\n    this.healthCheckInterval = setInterval(() => {\n      if (this.isReady && this.process) {\n        // Send ping to check if backend is responsive\n        this.send({ type: 'ping' })\n      }\n    }, this.HEALTH_CHECK_INTERVAL)\n  }\n\n  private killExistingPythonProcesses(): void {\n    try {\n      const { execSync } = require('child_process')\n\n      // First, check if any processes exist\n      let processes: string\n      try {\n        processes = execSync('pgrep -f \"isi_control/main.py\"', { encoding: 'utf8' })\n      } catch (error) {\n        // No processes found - this is expected most of the time\n        return\n      }\n\n      if (processes.trim()) {\n        console.log('Found existing ISI backend processes, terminating...')\n        execSync('pkill -f \"isi_control/main.py\"')\n      }\n    } catch (error) {\n      // Only log actual errors, not expected \"no processes found\" cases\n      if (error.status !== 1) { // pgrep returns 1 when no processes found\n        console.error('Error during process cleanup:', error.message)\n      }\n    }\n  }\n\n  private async cleanup(): Promise<void> {\n    if (this.startupTimeout) {\n      clearTimeout(this.startupTimeout)\n      this.startupTimeout = null\n    }\n\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval)\n      this.healthCheckInterval = null\n    }\n\n    if (this.process) {\n      try {\n        this.process.kill('SIGTERM')\n\n        // Give process time to shut down gracefully\n        await new Promise(resolve => setTimeout(resolve, 1000))\n\n        // Force kill if still running\n        if (!this.process.killed) {\n          this.process.kill('SIGKILL')\n        }\n      } catch (error) {\n        console.error('Error stopping Python process:', error)\n      }\n\n      this.process = null\n    }\n\n    this.isReady = false\n    this.messageQueue = []\n  }\n\n  send(message: any): void {\n    if (!this.isReady || !this.process) {\n      this.messageQueue.push(message)\n      return\n    }\n\n    const jsonMessage = JSON.stringify(message) + '\\n'\n    this.process.stdin?.write(jsonMessage)\n  }\n\n  private handleMessage(message: any): void {\n\n    // Forward to renderer process\n    if (mainWindow) {\n      mainWindow.webContents.send('python-message', message)\n    }\n  }\n\n  stop(): void {\n    if (this.process) {\n      this.process.kill()\n      this.process = null\n    }\n    this.isReady = false\n  }\n\n}\n\nconst backendManager = new PythonBackendManager()\n\nconst preload = path.join(__dirname, 'preload.js')\nconst url = process.env.VITE_DEV_SERVER_URL || 'http://localhost:5173'\nconst indexHtml = path.join(process.env.DIST, 'index.html')\n\nasync function createWindow() {\n  mainWindow = new BrowserWindow({\n    title: 'ISI Control System',\n    width: 1400,\n    height: 900,\n    minWidth: 1200,\n    minHeight: 800,\n    icon: path.join(process.env.VITE_PUBLIC, 'electron.png'),\n    webPreferences: {\n      preload,\n      nodeIntegration: false,\n      contextIsolation: true,\n      webSecurity: true,\n    },\n  })\n\n  // Check if we're in development mode by trying to detect Vite dev server\n  const isDevelopment = process.env.NODE_ENV !== 'production' || process.env.VITE_DEV_SERVER_URL\n\n  // Always load from built files for pure IPC communication\n  mainWindow.loadFile(indexHtml)\n\n  if (isDevelopment) {\n    // Open devtools in development\n    mainWindow.webContents.openDevTools()\n  }\n\n  // Test actively push message to the Electron-Renderer\n  mainWindow.webContents.on('did-finish-load', () => {\n    mainWindow?.webContents.send('main-process-message', `Renderer loaded at ${new Date().toLocaleString()}`)\n  })\n\n  // Make all links open with the browser, not with the application\n  mainWindow.webContents.setWindowOpenHandler(({ url }) => {\n    if (url.startsWith('https:')) {\n      require('electron').shell.openExternal(url)\n    }\n    return { action: 'deny' }\n  })\n\n  // Start Python backend after window is ready\n  try {\n    await backendManager.start()\n  } catch (error) {\n    // Continue running but show error in UI\n    mainWindow.webContents.send('backend-error', error.message)\n  }\n}\n\n// IPC Handlers\nipcMain.handle('send-to-python', async (event, message) => {\n  backendManager.send(message)\n  return { success: true }\n})\n\nipcMain.handle('get-system-status', async () => {\n  // Request system status from Python backend\n  backendManager.send({ type: 'get_system_status' })\n  return { success: true }\n})\n\nipcMain.handle('emergency-stop', async () => {\n  backendManager.send({ type: 'emergency_stop' })\n  return { success: true }\n})\n\n// App event handlers\napp.whenReady().then(createWindow)\n\napp.on('window-all-closed', () => {\n  mainWindow = null\n  backendManager.stop()\n  if (process.platform !== 'darwin') app.quit()\n})\n\napp.on('second-instance', () => {\n  if (mainWindow) {\n    // Focus on the main window if the user tried to open another\n    if (mainWindow.isMinimized()) mainWindow.restore()\n    mainWindow.focus()\n  }\n})\n\napp.on('activate', () => {\n  const allWindows = BrowserWindow.getAllWindows()\n  if (allWindows.length) {\n    allWindows[0].focus()\n  } else {\n    createWindow()\n  }\n})\n\n// Handle app termination\napp.on('before-quit', () => {\n  backendManager.stop()\n})\n\n// New window example arg: new windows url\nipcMain.handle('open-win', (_, arg) => {\n  const childWindow = new BrowserWindow({\n    webPreferences: {\n      preload,\n      nodeIntegration: false,\n      contextIsolation: true,\n    },\n  })\n\n  const isDevelopment = process.env.NODE_ENV !== 'production' || process.env.VITE_DEV_SERVER_URL\n\n  if (isDevelopment) {\n    childWindow.loadURL(`${url}#${arg}`)\n  } else {\n    childWindow.loadFile(indexHtml, { hash: arg })\n  }\n})"],"names":["require","url"],"mappings":"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"}