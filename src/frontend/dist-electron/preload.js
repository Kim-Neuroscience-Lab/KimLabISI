const { contextBridge, ipcRenderer } = require("electron");
contextBridge.exposeInMainWorld("ipcRenderer", {
  on(...args) {
    const [channel, listener] = args;
    return ipcRenderer.on(channel, (event, ...args2) => listener(event, ...args2));
  },
  off(...args) {
    const [channel, ...omit] = args;
    return ipcRenderer.off(channel, ...omit);
  },
  send(...args) {
    const [channel, ...omit] = args;
    return ipcRenderer.send(channel, ...omit);
  },
  invoke(...args) {
    const [channel, ...omit] = args;
    return ipcRenderer.invoke(channel, ...omit);
  }
});
const electronAPI = {
  // Python backend communication
  sendToPython: (message) => ipcRenderer.invoke("send-to-python", message),
  onPythonMessage: (callback) => {
    ipcRenderer.on("python-message", (_event, message) => callback(message));
  },
  removeAllPythonListeners: () => {
    ipcRenderer.removeAllListeners("python-message");
    ipcRenderer.removeAllListeners("main-process-message");
    ipcRenderer.removeAllListeners("backend-error");
  },
  // System control
  getSystemStatus: () => ipcRenderer.invoke("get-system-status"),
  emergencyStop: () => ipcRenderer.invoke("emergency-stop"),
  // General IPC
  onMainMessage: (callback) => {
    ipcRenderer.on("main-process-message", (_event, message) => callback(message));
  },
  onBackendError: (callback) => {
    ipcRenderer.on("backend-error", (_event, error) => callback(error));
  }
};
contextBridge.exposeInMainWorld("electronAPI", electronAPI);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlbG9hZC5qcyIsInNvdXJjZXMiOlsiLi4vZWxlY3Ryb24vcHJlbG9hZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IGNvbnRleHRCcmlkZ2UsIGlwY1JlbmRlcmVyIH0gPSByZXF1aXJlKCdlbGVjdHJvbicpXG5cbi8vIC0tLS0tLS0tLSBFeHBvc2Ugc29tZSBBUEkgdG8gdGhlIFJlbmRlcmVyIHByb2Nlc3MgLS0tLS0tLS0tXG5jb250ZXh0QnJpZGdlLmV4cG9zZUluTWFpbldvcmxkKCdpcGNSZW5kZXJlcicsIHtcbiAgb24oLi4uYXJnczogUGFyYW1ldGVyczx0eXBlb2YgaXBjUmVuZGVyZXIub24+KSB7XG4gICAgY29uc3QgW2NoYW5uZWwsIGxpc3RlbmVyXSA9IGFyZ3NcbiAgICByZXR1cm4gaXBjUmVuZGVyZXIub24oY2hhbm5lbCwgKGV2ZW50LCAuLi5hcmdzKSA9PiBsaXN0ZW5lcihldmVudCwgLi4uYXJncykpXG4gIH0sXG4gIG9mZiguLi5hcmdzOiBQYXJhbWV0ZXJzPHR5cGVvZiBpcGNSZW5kZXJlci5vZmY+KSB7XG4gICAgY29uc3QgW2NoYW5uZWwsIC4uLm9taXRdID0gYXJnc1xuICAgIHJldHVybiBpcGNSZW5kZXJlci5vZmYoY2hhbm5lbCwgLi4ub21pdClcbiAgfSxcbiAgc2VuZCguLi5hcmdzOiBQYXJhbWV0ZXJzPHR5cGVvZiBpcGNSZW5kZXJlci5zZW5kPikge1xuICAgIGNvbnN0IFtjaGFubmVsLCAuLi5vbWl0XSA9IGFyZ3NcbiAgICByZXR1cm4gaXBjUmVuZGVyZXIuc2VuZChjaGFubmVsLCAuLi5vbWl0KVxuICB9LFxuICBpbnZva2UoLi4uYXJnczogUGFyYW1ldGVyczx0eXBlb2YgaXBjUmVuZGVyZXIuaW52b2tlPikge1xuICAgIGNvbnN0IFtjaGFubmVsLCAuLi5vbWl0XSA9IGFyZ3NcbiAgICByZXR1cm4gaXBjUmVuZGVyZXIuaW52b2tlKGNoYW5uZWwsIC4uLm9taXQpXG4gIH0sXG59KVxuXG4vLyBUeXBlLXNhZmUgQVBJIGZvciB0aGUgcmVuZGVyZXIgcHJvY2Vzc1xuZXhwb3J0IGludGVyZmFjZSBFbGVjdHJvbkFQSSB7XG4gIC8vIFB5dGhvbiBiYWNrZW5kIGNvbW11bmljYXRpb25cbiAgc2VuZFRvUHl0aG9uOiAobWVzc2FnZTogYW55KSA9PiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbiB9PlxuICBvblB5dGhvbk1lc3NhZ2U6IChjYWxsYmFjazogKG1lc3NhZ2U6IGFueSkgPT4gdm9pZCkgPT4gdm9pZFxuICByZW1vdmVBbGxQeXRob25MaXN0ZW5lcnM6ICgpID0+IHZvaWRcblxuICAvLyBTeXN0ZW0gY29udHJvbFxuICBnZXRTeXN0ZW1TdGF0dXM6ICgpID0+IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuIH0+XG4gIGVtZXJnZW5jeVN0b3A6ICgpID0+IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuIH0+XG5cbiAgLy8gR2VuZXJhbCBJUENcbiAgb25NYWluTWVzc2FnZTogKGNhbGxiYWNrOiAobWVzc2FnZTogc3RyaW5nKSA9PiB2b2lkKSA9PiB2b2lkXG4gIG9uQmFja2VuZEVycm9yOiAoY2FsbGJhY2s6IChlcnJvcjogc3RyaW5nKSA9PiB2b2lkKSA9PiB2b2lkXG59XG5cbmNvbnN0IGVsZWN0cm9uQVBJOiBFbGVjdHJvbkFQSSA9IHtcbiAgLy8gUHl0aG9uIGJhY2tlbmQgY29tbXVuaWNhdGlvblxuICBzZW5kVG9QeXRob246IChtZXNzYWdlOiBhbnkpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnc2VuZC10by1weXRob24nLCBtZXNzYWdlKSxcblxuICBvblB5dGhvbk1lc3NhZ2U6IChjYWxsYmFjazogKG1lc3NhZ2U6IGFueSkgPT4gdm9pZCkgPT4ge1xuICAgIGlwY1JlbmRlcmVyLm9uKCdweXRob24tbWVzc2FnZScsIChfZXZlbnQsIG1lc3NhZ2UpID0+IGNhbGxiYWNrKG1lc3NhZ2UpKVxuICB9LFxuXG4gIHJlbW92ZUFsbFB5dGhvbkxpc3RlbmVyczogKCkgPT4ge1xuICAgIGlwY1JlbmRlcmVyLnJlbW92ZUFsbExpc3RlbmVycygncHl0aG9uLW1lc3NhZ2UnKVxuICAgIGlwY1JlbmRlcmVyLnJlbW92ZUFsbExpc3RlbmVycygnbWFpbi1wcm9jZXNzLW1lc3NhZ2UnKVxuICAgIGlwY1JlbmRlcmVyLnJlbW92ZUFsbExpc3RlbmVycygnYmFja2VuZC1lcnJvcicpXG4gIH0sXG5cbiAgLy8gU3lzdGVtIGNvbnRyb2xcbiAgZ2V0U3lzdGVtU3RhdHVzOiAoKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2dldC1zeXN0ZW0tc3RhdHVzJyksXG4gIGVtZXJnZW5jeVN0b3A6ICgpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnZW1lcmdlbmN5LXN0b3AnKSxcblxuICAvLyBHZW5lcmFsIElQQ1xuICBvbk1haW5NZXNzYWdlOiAoY2FsbGJhY2s6IChtZXNzYWdlOiBzdHJpbmcpID0+IHZvaWQpID0+IHtcbiAgICBpcGNSZW5kZXJlci5vbignbWFpbi1wcm9jZXNzLW1lc3NhZ2UnLCAoX2V2ZW50LCBtZXNzYWdlKSA9PiBjYWxsYmFjayhtZXNzYWdlKSlcbiAgfSxcblxuICBvbkJhY2tlbmRFcnJvcjogKGNhbGxiYWNrOiAoZXJyb3I6IHN0cmluZykgPT4gdm9pZCkgPT4ge1xuICAgIGlwY1JlbmRlcmVyLm9uKCdiYWNrZW5kLWVycm9yJywgKF9ldmVudCwgZXJyb3IpID0+IGNhbGxiYWNrKGVycm9yKSlcbiAgfVxufVxuXG4vLyBFeHBvc2UgdGhlIEFQSSB0byB0aGUgcmVuZGVyZXIgcHJvY2Vzc1xuY29udGV4dEJyaWRnZS5leHBvc2VJbk1haW5Xb3JsZCgnZWxlY3Ryb25BUEknLCBlbGVjdHJvbkFQSSlcblxuLy8gVHlwZXMgZm9yIHRoZSByZW5kZXJlciBwcm9jZXNzXG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBXaW5kb3cge1xuICAgIGVsZWN0cm9uQVBJOiBFbGVjdHJvbkFQSVxuICB9XG59Il0sIm5hbWVzIjpbImFyZ3MiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sRUFBRSxlQUFlLGdCQUFnQixRQUFRLFVBQVU7QUFHekQsY0FBYyxrQkFBa0IsZUFBZTtBQUFBLEVBQzdDLE1BQU0sTUFBeUM7QUFDN0MsVUFBTSxDQUFDLFNBQVMsUUFBUSxJQUFJO0FBQzVCLFdBQU8sWUFBWSxHQUFHLFNBQVMsQ0FBQyxVQUFVQSxVQUFTLFNBQVMsT0FBTyxHQUFHQSxLQUFJLENBQUM7QUFBQSxFQUM3RTtBQUFBLEVBQ0EsT0FBTyxNQUEwQztBQUMvQyxVQUFNLENBQUMsU0FBUyxHQUFHLElBQUksSUFBSTtBQUMzQixXQUFPLFlBQVksSUFBSSxTQUFTLEdBQUcsSUFBSTtBQUFBLEVBQ3pDO0FBQUEsRUFDQSxRQUFRLE1BQTJDO0FBQ2pELFVBQU0sQ0FBQyxTQUFTLEdBQUcsSUFBSSxJQUFJO0FBQzNCLFdBQU8sWUFBWSxLQUFLLFNBQVMsR0FBRyxJQUFJO0FBQUEsRUFDMUM7QUFBQSxFQUNBLFVBQVUsTUFBNkM7QUFDckQsVUFBTSxDQUFDLFNBQVMsR0FBRyxJQUFJLElBQUk7QUFDM0IsV0FBTyxZQUFZLE9BQU8sU0FBUyxHQUFHLElBQUk7QUFBQSxFQUM1QztBQUNGLENBQUM7QUFrQkQsTUFBTSxjQUEyQjtBQUFBO0FBQUEsRUFFL0IsY0FBYyxDQUFDLFlBQWlCLFlBQVksT0FBTyxrQkFBa0IsT0FBTztBQUFBLEVBRTVFLGlCQUFpQixDQUFDLGFBQXFDO0FBQ3JELGdCQUFZLEdBQUcsa0JBQWtCLENBQUMsUUFBUSxZQUFZLFNBQVMsT0FBTyxDQUFDO0FBQUEsRUFDekU7QUFBQSxFQUVBLDBCQUEwQixNQUFNO0FBQzlCLGdCQUFZLG1CQUFtQixnQkFBZ0I7QUFDL0MsZ0JBQVksbUJBQW1CLHNCQUFzQjtBQUNyRCxnQkFBWSxtQkFBbUIsZUFBZTtBQUFBLEVBQ2hEO0FBQUE7QUFBQSxFQUdBLGlCQUFpQixNQUFNLFlBQVksT0FBTyxtQkFBbUI7QUFBQSxFQUM3RCxlQUFlLE1BQU0sWUFBWSxPQUFPLGdCQUFnQjtBQUFBO0FBQUEsRUFHeEQsZUFBZSxDQUFDLGFBQXdDO0FBQ3RELGdCQUFZLEdBQUcsd0JBQXdCLENBQUMsUUFBUSxZQUFZLFNBQVMsT0FBTyxDQUFDO0FBQUEsRUFDL0U7QUFBQSxFQUVBLGdCQUFnQixDQUFDLGFBQXNDO0FBQ3JELGdCQUFZLEdBQUcsaUJBQWlCLENBQUMsUUFBUSxVQUFVLFNBQVMsS0FBSyxDQUFDO0FBQUEsRUFDcEU7QUFDRjtBQUdBLGNBQWMsa0JBQWtCLGVBQWUsV0FBVzsifQ==
