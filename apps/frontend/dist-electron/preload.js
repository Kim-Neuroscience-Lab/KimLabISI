const { contextBridge, ipcRenderer } = require("electron");
contextBridge.exposeInMainWorld("ipcRenderer", {
  on(...args) {
    const [channel, listener] = args;
    return ipcRenderer.on(channel, (event, ...args2) => listener(event, ...args2));
  },
  off(...args) {
    const [channel, ...omit] = args;
    return ipcRenderer.off(channel, ...omit);
  },
  send(...args) {
    const [channel, ...omit] = args;
    return ipcRenderer.send(channel, ...omit);
  },
  invoke(...args) {
    const [channel, ...omit] = args;
    return ipcRenderer.invoke(channel, ...omit);
  }
});
const electronAPI = {
  // Python backend communication
  sendToPython: (message) => ipcRenderer.invoke("send-to-python", message),
  onPythonMessage: (callback) => {
    ipcRenderer.on("python-message", (_event, message) => callback(message));
  },
  removeAllPythonListeners: () => {
    ipcRenderer.removeAllListeners("python-message");
  },
  // System control
  getSystemStatus: () => ipcRenderer.invoke("get-system-status"),
  emergencyStop: () => ipcRenderer.invoke("emergency-stop"),
  // General IPC
  onMainMessage: (callback) => {
    ipcRenderer.on("main-process-message", (_event, message) => callback(message));
  },
  onBackendError: (callback) => {
    ipcRenderer.on("backend-error", (_event, error) => callback(error));
  }
};
contextBridge.exposeInMainWorld("electronAPI", electronAPI);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlbG9hZC5qcyIsInNvdXJjZXMiOlsiLi4vZWxlY3Ryb24vcHJlbG9hZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IGNvbnRleHRCcmlkZ2UsIGlwY1JlbmRlcmVyIH0gPSByZXF1aXJlKCdlbGVjdHJvbicpXG5cbi8vIC0tLS0tLS0tLSBFeHBvc2Ugc29tZSBBUEkgdG8gdGhlIFJlbmRlcmVyIHByb2Nlc3MgLS0tLS0tLS0tXG5jb250ZXh0QnJpZGdlLmV4cG9zZUluTWFpbldvcmxkKCdpcGNSZW5kZXJlcicsIHtcbiAgb24oLi4uYXJnczogUGFyYW1ldGVyczx0eXBlb2YgaXBjUmVuZGVyZXIub24+KSB7XG4gICAgY29uc3QgW2NoYW5uZWwsIGxpc3RlbmVyXSA9IGFyZ3NcbiAgICByZXR1cm4gaXBjUmVuZGVyZXIub24oY2hhbm5lbCwgKGV2ZW50LCAuLi5hcmdzKSA9PiBsaXN0ZW5lcihldmVudCwgLi4uYXJncykpXG4gIH0sXG4gIG9mZiguLi5hcmdzOiBQYXJhbWV0ZXJzPHR5cGVvZiBpcGNSZW5kZXJlci5vZmY+KSB7XG4gICAgY29uc3QgW2NoYW5uZWwsIC4uLm9taXRdID0gYXJnc1xuICAgIHJldHVybiBpcGNSZW5kZXJlci5vZmYoY2hhbm5lbCwgLi4ub21pdClcbiAgfSxcbiAgc2VuZCguLi5hcmdzOiBQYXJhbWV0ZXJzPHR5cGVvZiBpcGNSZW5kZXJlci5zZW5kPikge1xuICAgIGNvbnN0IFtjaGFubmVsLCAuLi5vbWl0XSA9IGFyZ3NcbiAgICByZXR1cm4gaXBjUmVuZGVyZXIuc2VuZChjaGFubmVsLCAuLi5vbWl0KVxuICB9LFxuICBpbnZva2UoLi4uYXJnczogUGFyYW1ldGVyczx0eXBlb2YgaXBjUmVuZGVyZXIuaW52b2tlPikge1xuICAgIGNvbnN0IFtjaGFubmVsLCAuLi5vbWl0XSA9IGFyZ3NcbiAgICByZXR1cm4gaXBjUmVuZGVyZXIuaW52b2tlKGNoYW5uZWwsIC4uLm9taXQpXG4gIH0sXG59KVxuXG4vLyBUeXBlLXNhZmUgQVBJIGZvciB0aGUgcmVuZGVyZXIgcHJvY2Vzc1xuZXhwb3J0IGludGVyZmFjZSBFbGVjdHJvbkFQSSB7XG4gIC8vIFB5dGhvbiBiYWNrZW5kIGNvbW11bmljYXRpb25cbiAgc2VuZFRvUHl0aG9uOiAobWVzc2FnZTogYW55KSA9PiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbiB9PlxuICBvblB5dGhvbk1lc3NhZ2U6IChjYWxsYmFjazogKG1lc3NhZ2U6IGFueSkgPT4gdm9pZCkgPT4gdm9pZFxuICByZW1vdmVBbGxQeXRob25MaXN0ZW5lcnM6ICgpID0+IHZvaWRcblxuICAvLyBTeXN0ZW0gY29udHJvbFxuICBnZXRTeXN0ZW1TdGF0dXM6ICgpID0+IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuIH0+XG4gIGVtZXJnZW5jeVN0b3A6ICgpID0+IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuIH0+XG5cbiAgLy8gR2VuZXJhbCBJUENcbiAgb25NYWluTWVzc2FnZTogKGNhbGxiYWNrOiAobWVzc2FnZTogc3RyaW5nKSA9PiB2b2lkKSA9PiB2b2lkXG4gIG9uQmFja2VuZEVycm9yOiAoY2FsbGJhY2s6IChlcnJvcjogc3RyaW5nKSA9PiB2b2lkKSA9PiB2b2lkXG59XG5cbmNvbnN0IGVsZWN0cm9uQVBJOiBFbGVjdHJvbkFQSSA9IHtcbiAgLy8gUHl0aG9uIGJhY2tlbmQgY29tbXVuaWNhdGlvblxuICBzZW5kVG9QeXRob246IChtZXNzYWdlOiBhbnkpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnc2VuZC10by1weXRob24nLCBtZXNzYWdlKSxcblxuICBvblB5dGhvbk1lc3NhZ2U6IChjYWxsYmFjazogKG1lc3NhZ2U6IGFueSkgPT4gdm9pZCkgPT4ge1xuICAgIGlwY1JlbmRlcmVyLm9uKCdweXRob24tbWVzc2FnZScsIChfZXZlbnQsIG1lc3NhZ2UpID0+IGNhbGxiYWNrKG1lc3NhZ2UpKVxuICB9LFxuXG4gIHJlbW92ZUFsbFB5dGhvbkxpc3RlbmVyczogKCkgPT4ge1xuICAgIGlwY1JlbmRlcmVyLnJlbW92ZUFsbExpc3RlbmVycygncHl0aG9uLW1lc3NhZ2UnKVxuICB9LFxuXG4gIC8vIFN5c3RlbSBjb250cm9sXG4gIGdldFN5c3RlbVN0YXR1czogKCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdnZXQtc3lzdGVtLXN0YXR1cycpLFxuICBlbWVyZ2VuY3lTdG9wOiAoKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2VtZXJnZW5jeS1zdG9wJyksXG5cbiAgLy8gR2VuZXJhbCBJUENcbiAgb25NYWluTWVzc2FnZTogKGNhbGxiYWNrOiAobWVzc2FnZTogc3RyaW5nKSA9PiB2b2lkKSA9PiB7XG4gICAgaXBjUmVuZGVyZXIub24oJ21haW4tcHJvY2Vzcy1tZXNzYWdlJywgKF9ldmVudCwgbWVzc2FnZSkgPT4gY2FsbGJhY2sobWVzc2FnZSkpXG4gIH0sXG5cbiAgb25CYWNrZW5kRXJyb3I6IChjYWxsYmFjazogKGVycm9yOiBzdHJpbmcpID0+IHZvaWQpID0+IHtcbiAgICBpcGNSZW5kZXJlci5vbignYmFja2VuZC1lcnJvcicsIChfZXZlbnQsIGVycm9yKSA9PiBjYWxsYmFjayhlcnJvcikpXG4gIH1cbn1cblxuLy8gRXhwb3NlIHRoZSBBUEkgdG8gdGhlIHJlbmRlcmVyIHByb2Nlc3NcbmNvbnRleHRCcmlkZ2UuZXhwb3NlSW5NYWluV29ybGQoJ2VsZWN0cm9uQVBJJywgZWxlY3Ryb25BUEkpXG5cbi8vIFR5cGVzIGZvciB0aGUgcmVuZGVyZXIgcHJvY2Vzc1xuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgV2luZG93IHtcbiAgICBlbGVjdHJvbkFQSTogRWxlY3Ryb25BUElcbiAgfVxufSJdLCJuYW1lcyI6WyJhcmdzIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLEVBQUUsZUFBZSxnQkFBZ0IsUUFBUSxVQUFVO0FBR3pELGNBQWMsa0JBQWtCLGVBQWU7QUFBQSxFQUM3QyxNQUFNLE1BQXlDO0FBQzdDLFVBQU0sQ0FBQyxTQUFTLFFBQVEsSUFBSTtBQUM1QixXQUFPLFlBQVksR0FBRyxTQUFTLENBQUMsVUFBVUEsVUFBUyxTQUFTLE9BQU8sR0FBR0EsS0FBSSxDQUFDO0FBQUEsRUFDN0U7QUFBQSxFQUNBLE9BQU8sTUFBMEM7QUFDL0MsVUFBTSxDQUFDLFNBQVMsR0FBRyxJQUFJLElBQUk7QUFDM0IsV0FBTyxZQUFZLElBQUksU0FBUyxHQUFHLElBQUk7QUFBQSxFQUN6QztBQUFBLEVBQ0EsUUFBUSxNQUEyQztBQUNqRCxVQUFNLENBQUMsU0FBUyxHQUFHLElBQUksSUFBSTtBQUMzQixXQUFPLFlBQVksS0FBSyxTQUFTLEdBQUcsSUFBSTtBQUFBLEVBQzFDO0FBQUEsRUFDQSxVQUFVLE1BQTZDO0FBQ3JELFVBQU0sQ0FBQyxTQUFTLEdBQUcsSUFBSSxJQUFJO0FBQzNCLFdBQU8sWUFBWSxPQUFPLFNBQVMsR0FBRyxJQUFJO0FBQUEsRUFDNUM7QUFDRixDQUFDO0FBa0JELE1BQU0sY0FBMkI7QUFBQTtBQUFBLEVBRS9CLGNBQWMsQ0FBQyxZQUFpQixZQUFZLE9BQU8sa0JBQWtCLE9BQU87QUFBQSxFQUU1RSxpQkFBaUIsQ0FBQyxhQUFxQztBQUNyRCxnQkFBWSxHQUFHLGtCQUFrQixDQUFDLFFBQVEsWUFBWSxTQUFTLE9BQU8sQ0FBQztBQUFBLEVBQ3pFO0FBQUEsRUFFQSwwQkFBMEIsTUFBTTtBQUM5QixnQkFBWSxtQkFBbUIsZ0JBQWdCO0FBQUEsRUFDakQ7QUFBQTtBQUFBLEVBR0EsaUJBQWlCLE1BQU0sWUFBWSxPQUFPLG1CQUFtQjtBQUFBLEVBQzdELGVBQWUsTUFBTSxZQUFZLE9BQU8sZ0JBQWdCO0FBQUE7QUFBQSxFQUd4RCxlQUFlLENBQUMsYUFBd0M7QUFDdEQsZ0JBQVksR0FBRyx3QkFBd0IsQ0FBQyxRQUFRLFlBQVksU0FBUyxPQUFPLENBQUM7QUFBQSxFQUMvRTtBQUFBLEVBRUEsZ0JBQWdCLENBQUMsYUFBc0M7QUFDckQsZ0JBQVksR0FBRyxpQkFBaUIsQ0FBQyxRQUFRLFVBQVUsU0FBUyxLQUFLLENBQUM7QUFBQSxFQUNwRTtBQUNGO0FBR0EsY0FBYyxrQkFBa0IsZUFBZSxXQUFXOyJ9
