{"version":3,"file":"main.js","sources":["../electron/main.ts"],"sourcesContent":["import { app, BrowserWindow, ipcMain } from 'electron'\nimport { createRequire } from 'node:module'\nimport { fileURLToPath } from 'node:url'\nimport path from 'node:path'\nimport { spawn, ChildProcess } from 'node:child_process'\n\nconst require = createRequire(import.meta.url)\nconst __dirname = path.dirname(fileURLToPath(import.meta.url))\n\n// The built directory structure\n//\n// ├─┬ dist-electron\n// │ ├─┬ main.js    > Electron main\n// │ │ └─┬ preload.js    > Preload scripts\n// │ └─┬ renderer.js > Electron renderer\n//\nprocess.env.DIST_ELECTRON = path.join(__dirname, '../')\nprocess.env.DIST = path.join(process.env.DIST_ELECTRON, './dist')\nprocess.env.VITE_PUBLIC = process.env.VITE_DEV_SERVER_URL\n  ? path.join(process.env.DIST_ELECTRON, './public')\n  : process.env.DIST\n\n// Disable GPU Acceleration for Windows 7\nif (process.platform === 'win32') app.disableHardwareAcceleration()\n\n// Set application name for Windows 10+ notifications\nif (process.platform === 'win32') app.setAppUserModelId(app.getName())\n\nif (!app.requestSingleInstanceLock()) {\n  app.quit()\n  process.exit(0)\n}\n\n// Global variables for processes\nlet mainWindow: BrowserWindow | null = null\nlet pythonBackend: ChildProcess | null = null\n\n// Python Backend Management\nclass PythonBackendManager {\n  private process: ChildProcess | null = null\n  private isReady = false\n  private messageQueue: any[] = []\n\n  start(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      console.log('Starting Python backend with fixed paths...')\n\n      // Start Python process with IPC communication\n      const isDevelopment = process.env.NODE_ENV !== 'production' || process.env.VITE_DEV_SERVER_URL\n      const backendDir = isDevelopment\n        ? path.join(__dirname, '../../../backend')\n        : path.join(process.resourcesPath, 'backend')\n\n      this.process = spawn('/Users/Adam/.local/bin/poetry', ['run', 'python', 'src/isi_control/main.py'], {\n        stdio: ['pipe', 'pipe', 'pipe'],\n        cwd: backendDir,\n        env: {\n          ...process.env,\n          PYTHONPATH: 'src'\n        }\n      })\n\n      this.process.stdout?.on('data', (data) => {\n        const message = data.toString().trim()\n        console.log('Python backend:', message)\n\n        // Check if backend is ready\n        if (message.includes('IPC_READY')) {\n          this.isReady = true\n          console.log('Python backend ready for IPC')\n          resolve()\n\n          // Process queued messages\n          this.messageQueue.forEach(msg => this.send(msg))\n          this.messageQueue = []\n        } else {\n          try {\n            // Try to parse as JSON IPC message\n            const parsedMessage = JSON.parse(message)\n            this.handleMessage(parsedMessage)\n          } catch (e) {\n            // Regular log message\n            console.log('Python log:', message)\n          }\n        }\n      })\n\n      this.process.stderr?.on('data', (data) => {\n        console.error('Python backend error:', data.toString())\n      })\n\n      this.process.on('error', (error) => {\n        console.error('Failed to start Python backend:', error)\n        reject(error)\n      })\n\n      this.process.on('exit', (code) => {\n        console.log(`Python backend exited with code ${code}`)\n        this.isReady = false\n      })\n\n      // Timeout if backend doesn't start\n      setTimeout(() => {\n        if (!this.isReady) {\n          reject(new Error('Python backend startup timeout'))\n        }\n      }, 10000)\n    })\n  }\n\n  send(message: any): void {\n    if (!this.isReady || !this.process) {\n      console.log('Queuing message for Python backend')\n      this.messageQueue.push(message)\n      return\n    }\n\n    const jsonMessage = JSON.stringify(message) + '\\n'\n    this.process.stdin?.write(jsonMessage)\n  }\n\n  private handleMessage(message: any): void {\n    console.log('Received from Python backend:', message)\n\n    // Forward to renderer process\n    if (mainWindow) {\n      mainWindow.webContents.send('python-message', message)\n    }\n  }\n\n  stop(): void {\n    if (this.process) {\n      this.process.kill()\n      this.process = null\n    }\n    this.isReady = false\n  }\n\n}\n\nconst backendManager = new PythonBackendManager()\n\nconst preload = path.join(__dirname, 'preload.js')\nconst url = process.env.VITE_DEV_SERVER_URL || 'http://localhost:5173'\nconst indexHtml = path.join(process.env.DIST, 'index.html')\n\nasync function createWindow() {\n  mainWindow = new BrowserWindow({\n    title: 'ISI Control System',\n    width: 1400,\n    height: 900,\n    minWidth: 1200,\n    minHeight: 800,\n    icon: path.join(process.env.VITE_PUBLIC, 'electron.png'),\n    webPreferences: {\n      preload,\n      nodeIntegration: false,\n      contextIsolation: true,\n      webSecurity: true,\n    },\n  })\n\n  // Check if we're in development mode by trying to detect Vite dev server\n  const isDevelopment = process.env.NODE_ENV !== 'production' || process.env.VITE_DEV_SERVER_URL\n\n  if (isDevelopment) {\n    // In development, load from Vite dev server\n    mainWindow.loadURL(url)\n    // Open devtools in development\n    mainWindow.webContents.openDevTools()\n  } else {\n    // In production, load from built files\n    mainWindow.loadFile(indexHtml)\n  }\n\n  // Test actively push message to the Electron-Renderer\n  mainWindow.webContents.on('did-finish-load', () => {\n    mainWindow?.webContents.send('main-process-message', new Date().toLocaleString())\n  })\n\n  // Make all links open with the browser, not with the application\n  mainWindow.webContents.setWindowOpenHandler(({ url }) => {\n    if (url.startsWith('https:')) {\n      require('electron').shell.openExternal(url)\n    }\n    return { action: 'deny' }\n  })\n\n  // Start Python backend after window is ready\n  try {\n    await backendManager.start()\n    console.log('Python backend started successfully')\n  } catch (error) {\n    console.error('Failed to start Python backend:', error)\n    // Continue running but show error in UI\n    mainWindow.webContents.send('backend-error', error.message)\n  }\n}\n\n// IPC Handlers\nipcMain.handle('send-to-python', async (event, message) => {\n  console.log('Sending to Python backend:', message)\n  backendManager.send(message)\n  return { success: true }\n})\n\nipcMain.handle('get-system-status', async () => {\n  // Request system status from Python backend\n  backendManager.send({ type: 'get_system_status' })\n  return { success: true }\n})\n\nipcMain.handle('emergency-stop', async () => {\n  console.log('EMERGENCY STOP triggered')\n  backendManager.send({ type: 'emergency_stop' })\n  return { success: true }\n})\n\n// App event handlers\napp.whenReady().then(createWindow)\n\napp.on('window-all-closed', () => {\n  mainWindow = null\n  backendManager.stop()\n  if (process.platform !== 'darwin') app.quit()\n})\n\napp.on('second-instance', () => {\n  if (mainWindow) {\n    // Focus on the main window if the user tried to open another\n    if (mainWindow.isMinimized()) mainWindow.restore()\n    mainWindow.focus()\n  }\n})\n\napp.on('activate', () => {\n  const allWindows = BrowserWindow.getAllWindows()\n  if (allWindows.length) {\n    allWindows[0].focus()\n  } else {\n    createWindow()\n  }\n})\n\n// Handle app termination\napp.on('before-quit', () => {\n  backendManager.stop()\n})\n\n// New window example arg: new windows url\nipcMain.handle('open-win', (_, arg) => {\n  const childWindow = new BrowserWindow({\n    webPreferences: {\n      preload,\n      nodeIntegration: false,\n      contextIsolation: true,\n    },\n  })\n\n  const isDevelopment = process.env.NODE_ENV !== 'production' || process.env.VITE_DEV_SERVER_URL\n\n  if (isDevelopment) {\n    childWindow.loadURL(`${url}#${arg}`)\n  } else {\n    childWindow.loadFile(indexHtml, { hash: arg })\n  }\n})"],"names":["require","url"],"mappings":";;;;;;;;AAMA,MAAMA,WAAU,cAAc,YAAY,GAAG;AAC7C,MAAM,YAAY,KAAK,QAAQ,cAAc,YAAY,GAAG,CAAC;AAS7D,QAAA,IAAY,gBAAgB,KAAK,KAAK,WAAW,KAAK;AACtD,QAAA,IAAY,OAAO,KAAK,KAAK,QAAA,IAAY,eAAe,QAAQ;AAChE,QAAA,IAAY,cAAc,YAAY,sBAClC,KAAK,KAAK,QAAA,IAAY,eAAe,UAAU,IAC/C,QAAA,IAAY;AAGhB,IAAI,QAAQ,aAAa,QAAS,KAAI,4BAAA;AAGtC,IAAI,QAAQ,aAAa,aAAa,kBAAkB,IAAI,SAAS;AAErE,IAAI,CAAC,IAAI,6BAA6B;AACpC,MAAI,KAAA;AACJ,UAAQ,KAAK,CAAC;AAChB;AAGA,IAAI,aAAmC;AAIvC,MAAM,qBAAqB;AAAA,EAA3B;AACU,mCAA+B;AAC/B,mCAAU;AACV,wCAAsB,CAAA;AAAA;AAAA,EAE9B,QAAuB;AACrB,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;;AACtC,cAAQ,IAAI,6CAA6C;AAGzD,YAAM,gBAAgB,QAAA,IAAY,aAAa,gBAAgB,QAAA,IAAY;AAC3E,YAAM,aAAa,gBACf,KAAK,KAAK,WAAW,kBAAkB,IACvC,KAAK,KAAK,QAAQ,eAAe,SAAS;AAE9C,WAAK,UAAU,MAAM,iCAAiC,CAAC,OAAO,UAAU,yBAAyB,GAAG;AAAA,QAClG,OAAO,CAAC,QAAQ,QAAQ,MAAM;AAAA,QAC9B,KAAK;AAAA,QACL,KAAK;AAAA,UACH,GAAG,QAAA;AAAA,UACH,YAAY;AAAA,QAAA;AAAA,MACd,CACD;AAED,iBAAK,QAAQ,WAAb,mBAAqB,GAAG,QAAQ,CAAC,SAAS;AACxC,cAAM,UAAU,KAAK,SAAA,EAAW,KAAA;AAChC,gBAAQ,IAAI,mBAAmB,OAAO;AAGtC,YAAI,QAAQ,SAAS,WAAW,GAAG;AACjC,eAAK,UAAU;AACf,kBAAQ,IAAI,8BAA8B;AAC1C,kBAAA;AAGA,eAAK,aAAa,QAAQ,CAAA,QAAO,KAAK,KAAK,GAAG,CAAC;AAC/C,eAAK,eAAe,CAAA;AAAA,QACtB,OAAO;AACL,cAAI;AAEF,kBAAM,gBAAgB,KAAK,MAAM,OAAO;AACxC,iBAAK,cAAc,aAAa;AAAA,UAClC,SAAS,GAAG;AAEV,oBAAQ,IAAI,eAAe,OAAO;AAAA,UACpC;AAAA,QACF;AAAA,MACF;AAEA,iBAAK,QAAQ,WAAb,mBAAqB,GAAG,QAAQ,CAAC,SAAS;AACxC,gBAAQ,MAAM,yBAAyB,KAAK,SAAA,CAAU;AAAA,MACxD;AAEA,WAAK,QAAQ,GAAG,SAAS,CAAC,UAAU;AAClC,gBAAQ,MAAM,mCAAmC,KAAK;AACtD,eAAO,KAAK;AAAA,MACd,CAAC;AAED,WAAK,QAAQ,GAAG,QAAQ,CAAC,SAAS;AAChC,gBAAQ,IAAI,mCAAmC,IAAI,EAAE;AACrD,aAAK,UAAU;AAAA,MACjB,CAAC;AAGD,iBAAW,MAAM;AACf,YAAI,CAAC,KAAK,SAAS;AACjB,iBAAO,IAAI,MAAM,gCAAgC,CAAC;AAAA,QACpD;AAAA,MACF,GAAG,GAAK;AAAA,IACV,CAAC;AAAA,EACH;AAAA,EAEA,KAAK,SAAoB;;AACvB,QAAI,CAAC,KAAK,WAAW,CAAC,KAAK,SAAS;AAClC,cAAQ,IAAI,oCAAoC;AAChD,WAAK,aAAa,KAAK,OAAO;AAC9B;AAAA,IACF;AAEA,UAAM,cAAc,KAAK,UAAU,OAAO,IAAI;AAC9C,eAAK,QAAQ,UAAb,mBAAoB,MAAM;AAAA,EAC5B;AAAA,EAEQ,cAAc,SAAoB;AACxC,YAAQ,IAAI,iCAAiC,OAAO;AAGpD,QAAI,YAAY;AACd,iBAAW,YAAY,KAAK,kBAAkB,OAAO;AAAA,IACvD;AAAA,EACF;AAAA,EAEA,OAAa;AACX,QAAI,KAAK,SAAS;AAChB,WAAK,QAAQ,KAAA;AACb,WAAK,UAAU;AAAA,IACjB;AACA,SAAK,UAAU;AAAA,EACjB;AAEF;AAEA,MAAM,iBAAiB,IAAI,qBAAA;AAE3B,MAAM,UAAU,KAAK,KAAK,WAAW,YAAY;AACjD,MAAM,MAAM,YAAY,uBAAuB;AAC/C,MAAM,YAAY,KAAK,KAAK,QAAA,IAAY,MAAM,YAAY;AAE1D,eAAe,eAAe;AAC5B,eAAa,IAAI,cAAc;AAAA,IAC7B,OAAO;AAAA,IACP,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,WAAW;AAAA,IACX,MAAM,KAAK,KAAK,QAAA,IAAY,aAAa,cAAc;AAAA,IACvD,gBAAgB;AAAA,MACd;AAAA,MACA,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,MAClB,aAAa;AAAA,IAAA;AAAA,EACf,CACD;AAGD,QAAM,gBAAgB,QAAA,IAAY,aAAa,gBAAgB,QAAA,IAAY;AAE3E,MAAI,eAAe;AAEjB,eAAW,QAAQ,GAAG;AAEtB,eAAW,YAAY,aAAA;AAAA,EACzB,OAAO;AAEL,eAAW,SAAS,SAAS;AAAA,EAC/B;AAGA,aAAW,YAAY,GAAG,mBAAmB,MAAM;AACjD,6CAAY,YAAY,KAAK,6CAA4B,KAAA,GAAO;EAClE,CAAC;AAGD,aAAW,YAAY,qBAAqB,CAAC,EAAE,KAAAC,WAAU;AACvD,QAAIA,KAAI,WAAW,QAAQ,GAAG;AAC5B,MAAAD,SAAQ,UAAU,EAAE,MAAM,aAAaC,IAAG;AAAA,IAC5C;AACA,WAAO,EAAE,QAAQ,OAAA;AAAA,EACnB,CAAC;AAGD,MAAI;AACF,UAAM,eAAe,MAAA;AACrB,YAAQ,IAAI,qCAAqC;AAAA,EACnD,SAAS,OAAO;AACd,YAAQ,MAAM,mCAAmC,KAAK;AAEtD,eAAW,YAAY,KAAK,iBAAiB,MAAM,OAAO;AAAA,EAC5D;AACF;AAGA,QAAQ,OAAO,kBAAkB,OAAO,OAAO,YAAY;AACzD,UAAQ,IAAI,8BAA8B,OAAO;AACjD,iBAAe,KAAK,OAAO;AAC3B,SAAO,EAAE,SAAS,KAAA;AACpB,CAAC;AAED,QAAQ,OAAO,qBAAqB,YAAY;AAE9C,iBAAe,KAAK,EAAE,MAAM,oBAAA,CAAqB;AACjD,SAAO,EAAE,SAAS,KAAA;AACpB,CAAC;AAED,QAAQ,OAAO,kBAAkB,YAAY;AAC3C,UAAQ,IAAI,0BAA0B;AACtC,iBAAe,KAAK,EAAE,MAAM,iBAAA,CAAkB;AAC9C,SAAO,EAAE,SAAS,KAAA;AACpB,CAAC;AAGD,IAAI,UAAA,EAAY,KAAK,YAAY;AAEjC,IAAI,GAAG,qBAAqB,MAAM;AAChC,eAAa;AACb,iBAAe,KAAA;AACf,MAAI,QAAQ,aAAa,SAAU,KAAI,KAAA;AACzC,CAAC;AAED,IAAI,GAAG,mBAAmB,MAAM;AAC9B,MAAI,YAAY;AAEd,QAAI,WAAW,cAAe,YAAW,QAAA;AACzC,eAAW,MAAA;AAAA,EACb;AACF,CAAC;AAED,IAAI,GAAG,YAAY,MAAM;AACvB,QAAM,aAAa,cAAc,cAAA;AACjC,MAAI,WAAW,QAAQ;AACrB,eAAW,CAAC,EAAE,MAAA;AAAA,EAChB,OAAO;AACL,iBAAA;AAAA,EACF;AACF,CAAC;AAGD,IAAI,GAAG,eAAe,MAAM;AAC1B,iBAAe,KAAA;AACjB,CAAC;AAGD,QAAQ,OAAO,YAAY,CAAC,GAAG,QAAQ;AACrC,QAAM,cAAc,IAAI,cAAc;AAAA,IACpC,gBAAgB;AAAA,MACd;AAAA,MACA,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,IAAA;AAAA,EACpB,CACD;AAED,QAAM,gBAAgB,QAAA,IAAY,aAAa,gBAAgB,QAAA,IAAY;AAE3E,MAAI,eAAe;AACjB,gBAAY,QAAQ,GAAG,GAAG,IAAI,GAAG,EAAE;AAAA,EACrC,OAAO;AACL,gBAAY,SAAS,WAAW,EAAE,MAAM,KAAK;AAAA,EAC/C;AACF,CAAC;"}